{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-15T20:40:37.939Z",
    "end": "2021-11-15T20:40:45.982Z",
    "duration": 8043,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ad4edc4b-4565-4fd5-bce1-612acd26d16c",
      "title": "",
      "fullFile": "cypress/integration/booking.spec.js",
      "file": "cypress/integration/booking.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b039c968-ff18-409a-b3e2-421385f6fce2",
          "title": "Booking",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should list all booking @contract",
              "fullTitle": "Booking should list all booking @contract",
              "timedOut": null,
              "duration": 6734,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_request.default.get('booking').then(({\n  body\n}) => {\n  _assertion.default.contract(body, _schema.default.bookings());\n});",
              "err": {},
              "uuid": "a54a5718-ed75-4fee-88a9-70735ca00a58",
              "parentUUID": "b039c968-ff18-409a-b3e2-421385f6fce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new booking @functional",
              "fullTitle": "Booking should create a new booking @functional",
              "timedOut": null,
              "duration": 86,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_request.default.post('booking', booking).then(({\n  status,\n  body\n}) => {\n  _assertion.default.status(status, 200);\n  _assertion.default.notNull(body.bookingid);\n});",
              "err": {},
              "uuid": "9e276612-6104-49be-bdee-6f3107f6dd75",
              "parentUUID": "b039c968-ff18-409a-b3e2-421385f6fce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and list one booking @contract",
              "fullTitle": "Booking should create and list one booking @contract",
              "timedOut": null,
              "duration": 185,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_request.default.post('booking', booking).then(({\n  body\n}) => {\n  _assertion.default.contract(body, _schema.default.newBooking());\n  const {\n    bookingid\n  } = body;\n  _request.default.get(`booking/${bookingid}`).then(({\n    body\n  }) => {\n    _assertion.default.contract(body, _schema.default.booking());\n  });\n});",
              "err": {},
              "uuid": "b5538f72-6d1b-4dd7-be42-b5c5966d5809",
              "parentUUID": "b039c968-ff18-409a-b3e2-421385f6fce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a booking @functional",
              "fullTitle": "Booking should update a booking @functional",
              "timedOut": null,
              "duration": 143,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedBooking = booking;\nupdatedBooking.depositpaid = false;\n_request.default.post('booking', booking).then(({\n  body\n}) => {\n  const {\n    bookingid\n  } = body;\n  _request.default.put(`booking/${bookingid}`, updatedBooking).then(({\n    status\n  }) => {\n    _assertion.default.status(status, 200);\n  });\n});",
              "err": {},
              "uuid": "10cf2b29-a7c3-4604-946a-4b9c492fc30e",
              "parentUUID": "b039c968-ff18-409a-b3e2-421385f6fce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update a booking @functional",
              "fullTitle": "Booking should not update a booking @functional",
              "timedOut": null,
              "duration": 81,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bookingid = 'test';\n_request.default.put(`booking/${bookingid}`, booking).then(({\n  status,\n  body\n}) => {\n  _assertion.default.status(status, 405);\n  _assertion.default.notAllowed(body);\n});",
              "err": {},
              "uuid": "d8a3178e-1fe7-4906-8107-c5944a9f0ea1",
              "parentUUID": "b039c968-ff18-409a-b3e2-421385f6fce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a booking @functional",
              "fullTitle": "Booking should delete a booking @functional",
              "timedOut": null,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_request.default.post('booking', booking).then(({\n  body\n}) => {\n  const {\n    bookingid\n  } = body;\n  _request.default.delete(`booking/${bookingid}`).then(({\n    status\n  }) => {\n    _assertion.default.status(status, 201);\n  });\n});",
              "err": {},
              "uuid": "faf2ca97-3304-4514-ad7b-70b7fae9566b",
              "parentUUID": "b039c968-ff18-409a-b3e2-421385f6fce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete an inexistent booking @functional",
              "fullTitle": "Booking should not delete an inexistent booking @functional",
              "timedOut": null,
              "duration": 79,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bookingid = 'test';\n_request.default.delete(`booking/${bookingid}`).then(({\n  status,\n  body\n}) => {\n  _assertion.default.status(status, 405);\n  _assertion.default.notAllowed(body);\n});",
              "err": {},
              "uuid": "a58370b9-8456-4899-a4ce-1f8e41a1c5a5",
              "parentUUID": "b039c968-ff18-409a-b3e2-421385f6fce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete a booking without token @functional",
              "fullTitle": "Booking should not delete a booking without token @functional",
              "timedOut": null,
              "duration": 182,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_request.default.post('booking', booking).then(({\n  body\n}) => {\n  const {\n    bookingid\n  } = body;\n  _request.default.delete(`booking/${bookingid}`, null).then(({\n    status,\n    body\n  }) => {\n    _assertion.default.status(status, 403);\n    _assertion.default.forbidden(body);\n  });\n});",
              "err": {},
              "uuid": "f598e1e8-f03f-42d6-a735-55d3680fd7f0",
              "parentUUID": "b039c968-ff18-409a-b3e2-421385f6fce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete a booking with an invalid token @functional",
              "fullTitle": "Booking should not delete a booking with an invalid token @functional",
              "timedOut": null,
              "duration": 140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const headers = {\n  Cookie: 'token=invalid'\n};\n_request.default.post('booking', booking).then(({\n  body\n}) => {\n  const {\n    bookingid\n  } = body;\n  _request.default.delete(`booking/${bookingid}`, headers).then(({\n    status,\n    body\n  }) => {\n    _assertion.default.status(status, 403);\n    _assertion.default.forbidden(body);\n  });\n});",
              "err": {},
              "uuid": "0d552064-1c2a-4910-969e-8c02ce5662ae",
              "parentUUID": "b039c968-ff18-409a-b3e2-421385f6fce2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a54a5718-ed75-4fee-88a9-70735ca00a58",
            "9e276612-6104-49be-bdee-6f3107f6dd75",
            "b5538f72-6d1b-4dd7-be42-b5c5966d5809",
            "10cf2b29-a7c3-4604-946a-4b9c492fc30e",
            "d8a3178e-1fe7-4906-8107-c5944a9f0ea1",
            "faf2ca97-3304-4514-ad7b-70b7fae9566b",
            "a58370b9-8456-4899-a4ce-1f8e41a1c5a5",
            "f598e1e8-f03f-42d6-a735-55d3680fd7f0",
            "0d552064-1c2a-4910-969e-8c02ce5662ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7838,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "mochawesome-report",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.0.1"
    }
  }
}